import groovy.json.JsonSlurper

import java.nio.file.FileVisitResult
import java.nio.file.Files
import java.nio.file.Path
import java.nio.file.SimpleFileVisitor
import java.nio.file.attribute.BasicFileAttributes

String getPackageJsonPath() {
    return findProperty("APPSFLYER_PACKAGE_JSON") ?: "$rootDir/../node_modules/appsflyer-capacitor-plugin/package.json"
}

def findNodeModulesDir(File currentDir) {
    def dir = currentDir
    while (dir != null) {
        def nodeModulesDir = new File(dir, 'node_modules')
        if (nodeModulesDir.exists()) {
            return nodeModulesDir
        }
        dir = dir.parentFile
    }
    return null
}

def findPackageJsonInDep(String packageName) {
    def nodeModulesDir = findNodeModulesDir(project.rootDir)
    if (nodeModulesDir == null) {
        println "node_modules directory not found in any parent directories."
        return null
    }

    def json = null

    def walker = new SimpleFileVisitor<Path>() {
        @Override
        FileVisitResult visitFile(Path file, BasicFileAttributes attrs) {
            if (file.toAbsolutePath().endsWith("appsflyer-capacitor-plugin/package.json")) {
                try {
                    def content = new JsonSlurper().parseText(file.toFile().text)
                    if (content.name == packageName) {
                        println "Found package.json: ${file.toAbsolutePath()}"
                        json = content
                        return FileVisitResult.TERMINATE
                    }
                } catch (Exception e) {
                    println "Error parsing JSON in file: ${file.toAbsolutePath().toString()}\n${e.message}\n\t"
                }
            }
            return FileVisitResult.CONTINUE
        }
    }
    while (json == null && nodeModulesDir != null) {
        Files.walkFileTree(nodeModulesDir.toPath(), walker)
        // parentFile will give us exact same directory so we have to go 2 level upper
        // and find another node_modules
        nodeModulesDir = findNodeModulesDir(nodeModulesDir.parentFile.parentFile)
    }
    return json
}

def getPackageJson() {
    def packageJson
    def inputFile = new File(getPackageJsonPath())
    if (inputFile.exists()) {
        println "found package.json from ENV variable"
        packageJson = new JsonSlurper().parseText(inputFile.text)
    } else {
        println "could not found package.json from ENV variable"
        println "searching for package.json recursively"
        packageJson = findPackageJsonInDep("appsflyer-capacitor-plugin")
    }
    return packageJson
}
// Create an easy to use function
def getVersionFromNpm() {
    // Return the version, you can get any value this way
    return getPackageJson()["version"]
}

// Create an easy to use function
def getSDKVersionFromNpm() {
    // Return the version, you can get any value this way
    return getPackageJson()["androidSdkVersion"]
}

def getPluginBuildVersionFromNpm() {
    // Return the version, you can get any value this way
    return getPackageJson()["buildNumber"]
}

ext {
    junitVersion = project.hasProperty('junitVersion') ? rootProject.ext.junitVersion : '4.13.2'
    androidxAppCompatVersion = project.hasProperty('androidxAppCompatVersion') ? rootProject.ext.androidxAppCompatVersion : '1.6.1'
    androidxJunitVersion = project.hasProperty('androidxJunitVersion') ? rootProject.ext.androidxJunitVersion : '1.1.5'
    androidxEspressoCoreVersion = project.hasProperty('androidxEspressoCoreVersion') ? rootProject.ext.androidxEspressoCoreVersion : '3.5.1'
    af_sdk_version = getSDKVersionFromNpm()
    plugin_version = getVersionFromNpm()
    plugin_build_version = getPluginBuildVersionFromNpm()
}

buildscript {
    ext.kotlin_version = project.hasProperty("kotlin_version") ? rootProject.ext.kotlin_version : '1.9.10'
    repositories {
        google()
        mavenCentral()
    }
    dependencies {
        classpath 'com.android.tools.build:gradle:8.2.1'
        classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:$kotlin_version"
        classpath 'org.codehaus.groovy:groovy-json:3.0.9'
    }
}

apply plugin: 'com.android.library'
apply plugin: 'kotlin-android'

android {
    namespace "capacitor.plugin.appsflyer.sdk"
    compileSdk project.hasProperty('compileSdkVersion') ? rootProject.ext.compileSdkVersion : 34
    defaultConfig {
        minSdkVersion project.hasProperty('minSdkVersion') ? rootProject.ext.minSdkVersion : 22
        targetSdkVersion project.hasProperty('targetSdkVersion') ? rootProject.ext.targetSdkVersion : 34
        versionCode Integer.parseInt(plugin_build_version)
        versionName "$plugin_version"
        buildConfigField "int", "VERSION_CODE", plugin_build_version
        buildConfigField "String", "VERSION_NAME", "\"$plugin_version\""
        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
    }
    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }
    lintOptions {
        abortOnError false
    }
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_17
        targetCompatibility JavaVersion.VERSION_17
    }
    buildFeatures {
        buildConfig = true
    }
}

repositories {
    google()
    mavenCentral()
    mavenCentral()
}


dependencies {
    implementation fileTree(dir: 'libs', include: ['*.jar'])
    implementation project(':capacitor-android')
    implementation "androidx.appcompat:appcompat:$androidxAppCompatVersion"
    testImplementation "junit:junit:$junitVersion"
    androidTestImplementation "androidx.test.ext:junit:$androidxJunitVersion"
    androidTestImplementation "androidx.test.espresso:espresso-core:$androidxEspressoCoreVersion"
    implementation "androidx.core:core-ktx:1.8.0"
    implementation "org.jetbrains.kotlin:kotlin-stdlib:$kotlin_version"

    implementation "com.appsflyer:af-android-sdk:$af_sdk_version"
    implementation "com.android.installreferrer:installreferrer:2.2"


}
